// JENKINS CI PIPELINE
// Purpose: Build code into .jar & push Docker image to Dockerhub
// NOTE:
//  i. Store Dockerhub & GitHub credentials in Jenkins
// ii. Install 'ssh agent' plugin if using SSH, not needed for HTTPS+token
// iii. Configure Maven in Jenkins Global Tool Configuration with name 'maven-3.8.8'

pipeline {
    agent any

    tools {
        maven 'maven-3.8.8'   // ✅ must match name in Jenkins → Global Tool Configuration
    }

    environment {
        DOCKER_USERNAME = "chauhananand09"  // replace with your DockerHub username
    }

    stages {
        stage('Check Maven Version') {
            steps {
                sh 'mvn -version'
            }
        }

        stage("1. Cleanup") {
            steps {
                deleteDir()
            }
        }

        stage('2. Git Checkout') {
            steps {
                dir("DevopsProject1") {
                    git branch: 'main',
                        url: 'https://github.com/archauh/DevopsProject1.git',
                        credentialsId: 'git-hub'  // must match your Jenkins credential ID
                }
            }
        }

        stage("3. Maven Unit Test") {
            steps {
                dir("DevopsProject1") {
                    sh 'mvn test'
                }
            }
        }

        stage('4. Maven Build') {
            steps {
                dir("DevopsProject1") {
                    sh 'mvn clean install'
                }
            }
        }

        stage("5. Maven Integration Test") {
            steps {
                dir("DevopsProject1") {
                    sh 'mvn verify'
                }
            }
        }

        stage('6. Docker Image Build') {
            steps {
                dir('DevopsProject1') {
                    script {
                        def JOB = env.JOB_NAME.toLowerCase()
                        sh "docker build -t ${JOB}:${BUILD_NUMBER} ."
                    }
                }
            }
        }

        stage('7. Docker Image Tag') {
            steps {
                dir('DevopsProject1') {
                    script {
                        def JOB = env.JOB_NAME.toLowerCase()
                        sh "docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}"
                        sh "docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:latest"
                    }
                }
            }
        }

        stage('8. Trivy Image Scan') {
            steps {
                script {
                    def JOB = env.JOB_NAME.toLowerCase()
                    sh "trivy image ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER} > scan.txt"
                }
            }
        }

        stage('9. Docker Image Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'docker_user', passwordVariable: 'docker_pass')]) {
                        sh "docker login -u '${docker_user}' -p '${docker_pass}'"
                        def JOB = env.JOB_NAME.toLowerCase()
                        sh "docker push ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}"
                        sh "docker push ${DOCKER_USERNAME}/${JOB}:latest"
                    }
                }
            }
        }

        stage('10. Docker Image Cleanup') {
            steps {
                sh "docker image prune -af"
            }
        }
    }
}
